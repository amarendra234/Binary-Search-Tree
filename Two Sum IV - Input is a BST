/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void haspre(stack<TreeNode*>&pre){
        TreeNode* temp=pre.top();
        pre.pop();
        if(temp->left!=NULL){
            temp=temp->left;
            while(temp!=NULL){
                pre.push(temp);
                temp=temp->right;
            }
        }
    }
    void hasnext(stack<TreeNode*>&next){
        TreeNode* temp=next.top();
        next.pop();
        if(temp->right!=NULL){
            temp=temp->right;
            while(temp!=NULL){
                next.push(temp);
                temp=temp->left;
            }
        }
    }
    bool findTarget(TreeNode* root, int k) {
        stack<TreeNode*>next;
        stack<TreeNode*>pre;
         if(root!=NULL){
            TreeNode* temp=root;
            while(temp!=NULL){
                next.push(temp);
                temp=temp->left;
            }
         }
         if(root!=NULL){
            TreeNode* temp=root;
            while(temp!=NULL){
                pre.push(temp);
                temp=temp->right;
            }
         }
         while(next.size()!=0 and pre.size()!=0){
            int val1=next.top()->val;
            int val2=pre.top()->val;
            cout<<val1<<" "<<val2<<endl;
            if(val1==val2){
                break;
            }
            if(val1+val2==k){
                return true;
            }else if(val1+val2>k){
                haspre(pre);
            }else{
                hasnext(next);
            }
         }
         return  false;
    }
};
