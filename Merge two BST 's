class Solution {
    // Function to return a list of integers denoting the node
    // values of both the BST in a sorted order.
    Stack<Node>st1=new Stack<>();
    Stack<Node>st2=new Stack<>();
    private void add_stack(Node root, int f){
          if(root!=null && f==0){
              Node temp=root;
              while(temp!=null){
                st1.push(temp);
                temp=temp.left;
            }
        }
        if(root!=null && f==1){
            Node temp=root;
            while(temp!=null){
                st2.push(temp);
                temp=temp.left;
            }
        }
    }
    public List<Integer> merge(Node root1, Node root2) {
        List<Integer>ans=new ArrayList<>();
        add_stack(root1,0);
        add_stack(root2,1);
        while(!st1.isEmpty() && !st2.isEmpty()){
            if(st1.peek().data>st2.peek().data){
                Node node=st2.pop();
                ans.add(node.data);
                if(node.right!=null){
                    add_stack(node.right,1);
                }
            }else{
                Node node=st1.pop();
                ans.add(node.data);
                if(node.right!=null){
                   add_stack(node.right,0);
                }
            }
        }
        while(!st1.isEmpty()){
            Node node=st1.pop();
            ans.add(node.data);
            if(node.right!=null){
               add_stack(node.right,0);
            }
        }
        while(!st2.isEmpty()){
            Node node=st2.pop();
            ans.add(node.data);
            if(node.right!=null){
               add_stack(node.right,1);
           }
        }
        return ans;
    }
}
